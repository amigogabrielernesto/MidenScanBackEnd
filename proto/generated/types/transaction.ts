// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: types/transaction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AccountId } from "./account";
import { Digest } from "./primitives";

export const protobufPackage = "transaction";

/** Submits proven transaction to the Miden network. */
export interface ProvenTransaction {
  /**
   * Transaction encoded using [winter_utils::Serializable] implementation for
   * [miden_objects::transaction::proven_tx::ProvenTransaction].
   */
  transaction: Uint8Array;
}

/** Represents a transaction ID. */
export interface TransactionId {
  /** The transaction ID. */
  id: Digest | undefined;
}

/** Represents a transaction summary. */
export interface TransactionSummary {
  /** A unique 32-byte identifier of a transaction. */
  transactionId:
    | TransactionId
    | undefined;
  /** The block number in which the transaction was executed. */
  blockNum: number;
  /** The ID of the account affected by the transaction. */
  accountId: AccountId | undefined;
}

function createBaseProvenTransaction(): ProvenTransaction {
  return { transaction: new Uint8Array(0) };
}

export const ProvenTransaction: MessageFns<ProvenTransaction> = {
  encode(message: ProvenTransaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transaction.length !== 0) {
      writer.uint32(10).bytes(message.transaction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvenTransaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvenTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transaction = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProvenTransaction {
    return { transaction: isSet(object.transaction) ? bytesFromBase64(object.transaction) : new Uint8Array(0) };
  },

  toJSON(message: ProvenTransaction): unknown {
    const obj: any = {};
    if (message.transaction.length !== 0) {
      obj.transaction = base64FromBytes(message.transaction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProvenTransaction>, I>>(base?: I): ProvenTransaction {
    return ProvenTransaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProvenTransaction>, I>>(object: I): ProvenTransaction {
    const message = createBaseProvenTransaction();
    message.transaction = object.transaction ?? new Uint8Array(0);
    return message;
  },
};

function createBaseTransactionId(): TransactionId {
  return { id: undefined };
}

export const TransactionId: MessageFns<TransactionId> = {
  encode(message: TransactionId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      Digest.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = Digest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionId {
    return { id: isSet(object.id) ? Digest.fromJSON(object.id) : undefined };
  },

  toJSON(message: TransactionId): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Digest.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionId>, I>>(base?: I): TransactionId {
    return TransactionId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionId>, I>>(object: I): TransactionId {
    const message = createBaseTransactionId();
    message.id = (object.id !== undefined && object.id !== null) ? Digest.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseTransactionSummary(): TransactionSummary {
  return { transactionId: undefined, blockNum: 0, accountId: undefined };
}

export const TransactionSummary: MessageFns<TransactionSummary> = {
  encode(message: TransactionSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionId !== undefined) {
      TransactionId.encode(message.transactionId, writer.uint32(10).fork()).join();
    }
    if (message.blockNum !== 0) {
      writer.uint32(21).fixed32(message.blockNum);
    }
    if (message.accountId !== undefined) {
      AccountId.encode(message.accountId, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactionId = TransactionId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.blockNum = reader.fixed32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.accountId = AccountId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionSummary {
    return {
      transactionId: isSet(object.transactionId) ? TransactionId.fromJSON(object.transactionId) : undefined,
      blockNum: isSet(object.blockNum) ? globalThis.Number(object.blockNum) : 0,
      accountId: isSet(object.accountId) ? AccountId.fromJSON(object.accountId) : undefined,
    };
  },

  toJSON(message: TransactionSummary): unknown {
    const obj: any = {};
    if (message.transactionId !== undefined) {
      obj.transactionId = TransactionId.toJSON(message.transactionId);
    }
    if (message.blockNum !== 0) {
      obj.blockNum = Math.round(message.blockNum);
    }
    if (message.accountId !== undefined) {
      obj.accountId = AccountId.toJSON(message.accountId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionSummary>, I>>(base?: I): TransactionSummary {
    return TransactionSummary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionSummary>, I>>(object: I): TransactionSummary {
    const message = createBaseTransactionSummary();
    message.transactionId = (object.transactionId !== undefined && object.transactionId !== null)
      ? TransactionId.fromPartial(object.transactionId)
      : undefined;
    message.blockNum = object.blockNum ?? 0;
    message.accountId = (object.accountId !== undefined && object.accountId !== null)
      ? AccountId.fromPartial(object.accountId)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
