// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: types/note.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AccountId } from "./account";
import { Digest, SparseMerklePath } from "./primitives";

export const protobufPackage = "note";

/** Represents a note's ID. */
export interface NoteId {
  /** A unique identifier of the note which is a 32-byte commitment to the underlying note data. */
  id: Digest | undefined;
}

/** List of note IDs. */
export interface NoteIdList {
  /** List of note IDs to be queried from the database. */
  ids: NoteId[];
}

/** Represents a note's metadata. */
export interface NoteMetadata {
  /** The account which sent the note. */
  sender:
    | AccountId
    | undefined;
  /** The type of the note (0b01 = public, 0b10 = private, 0b11 = encrypted). */
  noteType: number;
  /**
   * A value which can be used by the recipient(s) to identify notes intended for them.
   *
   * See `miden_objects::note::note_tag` for more info.
   */
  tag: number;
  /**
   * Specifies when a note is ready to be consumed.
   *
   * See `miden_objects::note::execution_hint` for more info.
   */
  executionHint: number;
  /** An arbitrary user-defined value. */
  aux: number;
}

/**
 * Represents a note.
 *
 * The note is composed of the note metadata and its serialized details.
 */
export interface Note {
  /** The note's metadata. */
  metadata:
    | NoteMetadata
    | undefined;
  /** Serialized note details (empty for private notes). */
  details?: Uint8Array | undefined;
}

/**
 * Represents a network note.
 *
 * Network notes are a subtype of public notes, and as such, their details are always publicly
 * known.
 */
export interface NetworkNote {
  /** The note's metadata. */
  metadata:
    | NoteMetadata
    | undefined;
  /** Serialized note details (i.e., assets and recipient). */
  details: Uint8Array;
}

/**
 * Represents a committed note.
 *
 * A committed note is a note that has been included in a block.
 */
export interface CommittedNote {
  /** Either private, public, or network note. */
  note:
    | Note
    | undefined;
  /** The data needed to prove that the note is present in the chain. */
  inclusionProof: NoteInclusionInBlockProof | undefined;
}

/** Represents the result of getting committed notes. */
export interface CommittedNoteList {
  /** List of committed notes. */
  notes: CommittedNote[];
}

/**
 * Represents a proof of note's inclusion in a block.
 *
 * Does not include proof of the block's inclusion in the chain.
 */
export interface NoteInclusionInBlockProof {
  /** A unique identifier of the note which is a 32-byte commitment to the underlying note data. */
  noteId:
    | NoteId
    | undefined;
  /** The block number in which the note was created. */
  blockNum: number;
  /** The index of the note in the block. */
  noteIndexInBlock: number;
  /** The note's inclusion proof in the block. */
  inclusionPath: SparseMerklePath | undefined;
}

/** Represents proof of a note inclusion in the block. */
export interface NoteSyncRecord {
  /** A unique identifier of the note which is a 32-byte commitment to the underlying note data. */
  noteId:
    | NoteId
    | undefined;
  /** The index of the note in the block. */
  noteIndexInBlock: number;
  /** The note's metadata. */
  metadata:
    | NoteMetadata
    | undefined;
  /** The note's inclusion proof in the block. */
  inclusionPath: SparseMerklePath | undefined;
}

function createBaseNoteId(): NoteId {
  return { id: undefined };
}

export const NoteId: MessageFns<NoteId> = {
  encode(message: NoteId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      Digest.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NoteId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoteId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = Digest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NoteId {
    return { id: isSet(object.id) ? Digest.fromJSON(object.id) : undefined };
  },

  toJSON(message: NoteId): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Digest.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NoteId>, I>>(base?: I): NoteId {
    return NoteId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoteId>, I>>(object: I): NoteId {
    const message = createBaseNoteId();
    message.id = (object.id !== undefined && object.id !== null) ? Digest.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseNoteIdList(): NoteIdList {
  return { ids: [] };
}

export const NoteIdList: MessageFns<NoteIdList> = {
  encode(message: NoteIdList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ids) {
      NoteId.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NoteIdList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoteIdList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ids.push(NoteId.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NoteIdList {
    return { ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => NoteId.fromJSON(e)) : [] };
  },

  toJSON(message: NoteIdList): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids.map((e) => NoteId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NoteIdList>, I>>(base?: I): NoteIdList {
    return NoteIdList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoteIdList>, I>>(object: I): NoteIdList {
    const message = createBaseNoteIdList();
    message.ids = object.ids?.map((e) => NoteId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNoteMetadata(): NoteMetadata {
  return { sender: undefined, noteType: 0, tag: 0, executionHint: 0, aux: 0 };
}

export const NoteMetadata: MessageFns<NoteMetadata> = {
  encode(message: NoteMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== undefined) {
      AccountId.encode(message.sender, writer.uint32(10).fork()).join();
    }
    if (message.noteType !== 0) {
      writer.uint32(16).uint32(message.noteType);
    }
    if (message.tag !== 0) {
      writer.uint32(29).fixed32(message.tag);
    }
    if (message.executionHint !== 0) {
      writer.uint32(33).fixed64(message.executionHint);
    }
    if (message.aux !== 0) {
      writer.uint32(41).fixed64(message.aux);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NoteMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoteMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = AccountId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.noteType = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.tag = reader.fixed32();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.executionHint = longToNumber(reader.fixed64());
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.aux = longToNumber(reader.fixed64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NoteMetadata {
    return {
      sender: isSet(object.sender) ? AccountId.fromJSON(object.sender) : undefined,
      noteType: isSet(object.noteType) ? globalThis.Number(object.noteType) : 0,
      tag: isSet(object.tag) ? globalThis.Number(object.tag) : 0,
      executionHint: isSet(object.executionHint) ? globalThis.Number(object.executionHint) : 0,
      aux: isSet(object.aux) ? globalThis.Number(object.aux) : 0,
    };
  },

  toJSON(message: NoteMetadata): unknown {
    const obj: any = {};
    if (message.sender !== undefined) {
      obj.sender = AccountId.toJSON(message.sender);
    }
    if (message.noteType !== 0) {
      obj.noteType = Math.round(message.noteType);
    }
    if (message.tag !== 0) {
      obj.tag = Math.round(message.tag);
    }
    if (message.executionHint !== 0) {
      obj.executionHint = Math.round(message.executionHint);
    }
    if (message.aux !== 0) {
      obj.aux = Math.round(message.aux);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NoteMetadata>, I>>(base?: I): NoteMetadata {
    return NoteMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoteMetadata>, I>>(object: I): NoteMetadata {
    const message = createBaseNoteMetadata();
    message.sender = (object.sender !== undefined && object.sender !== null)
      ? AccountId.fromPartial(object.sender)
      : undefined;
    message.noteType = object.noteType ?? 0;
    message.tag = object.tag ?? 0;
    message.executionHint = object.executionHint ?? 0;
    message.aux = object.aux ?? 0;
    return message;
  },
};

function createBaseNote(): Note {
  return { metadata: undefined, details: undefined };
}

export const Note: MessageFns<Note> = {
  encode(message: Note, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      NoteMetadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.details !== undefined) {
      writer.uint32(18).bytes(message.details);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Note {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = NoteMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.details = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Note {
    return {
      metadata: isSet(object.metadata) ? NoteMetadata.fromJSON(object.metadata) : undefined,
      details: isSet(object.details) ? bytesFromBase64(object.details) : undefined,
    };
  },

  toJSON(message: Note): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = NoteMetadata.toJSON(message.metadata);
    }
    if (message.details !== undefined) {
      obj.details = base64FromBytes(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Note>, I>>(base?: I): Note {
    return Note.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Note>, I>>(object: I): Note {
    const message = createBaseNote();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? NoteMetadata.fromPartial(object.metadata)
      : undefined;
    message.details = object.details ?? undefined;
    return message;
  },
};

function createBaseNetworkNote(): NetworkNote {
  return { metadata: undefined, details: new Uint8Array(0) };
}

export const NetworkNote: MessageFns<NetworkNote> = {
  encode(message: NetworkNote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      NoteMetadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.details.length !== 0) {
      writer.uint32(18).bytes(message.details);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NetworkNote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkNote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = NoteMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.details = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkNote {
    return {
      metadata: isSet(object.metadata) ? NoteMetadata.fromJSON(object.metadata) : undefined,
      details: isSet(object.details) ? bytesFromBase64(object.details) : new Uint8Array(0),
    };
  },

  toJSON(message: NetworkNote): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = NoteMetadata.toJSON(message.metadata);
    }
    if (message.details.length !== 0) {
      obj.details = base64FromBytes(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkNote>, I>>(base?: I): NetworkNote {
    return NetworkNote.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NetworkNote>, I>>(object: I): NetworkNote {
    const message = createBaseNetworkNote();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? NoteMetadata.fromPartial(object.metadata)
      : undefined;
    message.details = object.details ?? new Uint8Array(0);
    return message;
  },
};

function createBaseCommittedNote(): CommittedNote {
  return { note: undefined, inclusionProof: undefined };
}

export const CommittedNote: MessageFns<CommittedNote> = {
  encode(message: CommittedNote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.note !== undefined) {
      Note.encode(message.note, writer.uint32(10).fork()).join();
    }
    if (message.inclusionProof !== undefined) {
      NoteInclusionInBlockProof.encode(message.inclusionProof, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommittedNote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommittedNote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.note = Note.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inclusionProof = NoteInclusionInBlockProof.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommittedNote {
    return {
      note: isSet(object.note) ? Note.fromJSON(object.note) : undefined,
      inclusionProof: isSet(object.inclusionProof)
        ? NoteInclusionInBlockProof.fromJSON(object.inclusionProof)
        : undefined,
    };
  },

  toJSON(message: CommittedNote): unknown {
    const obj: any = {};
    if (message.note !== undefined) {
      obj.note = Note.toJSON(message.note);
    }
    if (message.inclusionProof !== undefined) {
      obj.inclusionProof = NoteInclusionInBlockProof.toJSON(message.inclusionProof);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommittedNote>, I>>(base?: I): CommittedNote {
    return CommittedNote.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommittedNote>, I>>(object: I): CommittedNote {
    const message = createBaseCommittedNote();
    message.note = (object.note !== undefined && object.note !== null) ? Note.fromPartial(object.note) : undefined;
    message.inclusionProof = (object.inclusionProof !== undefined && object.inclusionProof !== null)
      ? NoteInclusionInBlockProof.fromPartial(object.inclusionProof)
      : undefined;
    return message;
  },
};

function createBaseCommittedNoteList(): CommittedNoteList {
  return { notes: [] };
}

export const CommittedNoteList: MessageFns<CommittedNoteList> = {
  encode(message: CommittedNoteList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notes) {
      CommittedNote.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommittedNoteList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommittedNoteList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notes.push(CommittedNote.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommittedNoteList {
    return {
      notes: globalThis.Array.isArray(object?.notes) ? object.notes.map((e: any) => CommittedNote.fromJSON(e)) : [],
    };
  },

  toJSON(message: CommittedNoteList): unknown {
    const obj: any = {};
    if (message.notes?.length) {
      obj.notes = message.notes.map((e) => CommittedNote.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommittedNoteList>, I>>(base?: I): CommittedNoteList {
    return CommittedNoteList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommittedNoteList>, I>>(object: I): CommittedNoteList {
    const message = createBaseCommittedNoteList();
    message.notes = object.notes?.map((e) => CommittedNote.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNoteInclusionInBlockProof(): NoteInclusionInBlockProof {
  return { noteId: undefined, blockNum: 0, noteIndexInBlock: 0, inclusionPath: undefined };
}

export const NoteInclusionInBlockProof: MessageFns<NoteInclusionInBlockProof> = {
  encode(message: NoteInclusionInBlockProof, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.noteId !== undefined) {
      NoteId.encode(message.noteId, writer.uint32(10).fork()).join();
    }
    if (message.blockNum !== 0) {
      writer.uint32(21).fixed32(message.blockNum);
    }
    if (message.noteIndexInBlock !== 0) {
      writer.uint32(24).uint32(message.noteIndexInBlock);
    }
    if (message.inclusionPath !== undefined) {
      SparseMerklePath.encode(message.inclusionPath, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NoteInclusionInBlockProof {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoteInclusionInBlockProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.noteId = NoteId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.blockNum = reader.fixed32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.noteIndexInBlock = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.inclusionPath = SparseMerklePath.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NoteInclusionInBlockProof {
    return {
      noteId: isSet(object.noteId) ? NoteId.fromJSON(object.noteId) : undefined,
      blockNum: isSet(object.blockNum) ? globalThis.Number(object.blockNum) : 0,
      noteIndexInBlock: isSet(object.noteIndexInBlock) ? globalThis.Number(object.noteIndexInBlock) : 0,
      inclusionPath: isSet(object.inclusionPath) ? SparseMerklePath.fromJSON(object.inclusionPath) : undefined,
    };
  },

  toJSON(message: NoteInclusionInBlockProof): unknown {
    const obj: any = {};
    if (message.noteId !== undefined) {
      obj.noteId = NoteId.toJSON(message.noteId);
    }
    if (message.blockNum !== 0) {
      obj.blockNum = Math.round(message.blockNum);
    }
    if (message.noteIndexInBlock !== 0) {
      obj.noteIndexInBlock = Math.round(message.noteIndexInBlock);
    }
    if (message.inclusionPath !== undefined) {
      obj.inclusionPath = SparseMerklePath.toJSON(message.inclusionPath);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NoteInclusionInBlockProof>, I>>(base?: I): NoteInclusionInBlockProof {
    return NoteInclusionInBlockProof.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoteInclusionInBlockProof>, I>>(object: I): NoteInclusionInBlockProof {
    const message = createBaseNoteInclusionInBlockProof();
    message.noteId = (object.noteId !== undefined && object.noteId !== null)
      ? NoteId.fromPartial(object.noteId)
      : undefined;
    message.blockNum = object.blockNum ?? 0;
    message.noteIndexInBlock = object.noteIndexInBlock ?? 0;
    message.inclusionPath = (object.inclusionPath !== undefined && object.inclusionPath !== null)
      ? SparseMerklePath.fromPartial(object.inclusionPath)
      : undefined;
    return message;
  },
};

function createBaseNoteSyncRecord(): NoteSyncRecord {
  return { noteId: undefined, noteIndexInBlock: 0, metadata: undefined, inclusionPath: undefined };
}

export const NoteSyncRecord: MessageFns<NoteSyncRecord> = {
  encode(message: NoteSyncRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.noteId !== undefined) {
      NoteId.encode(message.noteId, writer.uint32(10).fork()).join();
    }
    if (message.noteIndexInBlock !== 0) {
      writer.uint32(16).uint32(message.noteIndexInBlock);
    }
    if (message.metadata !== undefined) {
      NoteMetadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    if (message.inclusionPath !== undefined) {
      SparseMerklePath.encode(message.inclusionPath, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NoteSyncRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoteSyncRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.noteId = NoteId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.noteIndexInBlock = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = NoteMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.inclusionPath = SparseMerklePath.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NoteSyncRecord {
    return {
      noteId: isSet(object.noteId) ? NoteId.fromJSON(object.noteId) : undefined,
      noteIndexInBlock: isSet(object.noteIndexInBlock) ? globalThis.Number(object.noteIndexInBlock) : 0,
      metadata: isSet(object.metadata) ? NoteMetadata.fromJSON(object.metadata) : undefined,
      inclusionPath: isSet(object.inclusionPath) ? SparseMerklePath.fromJSON(object.inclusionPath) : undefined,
    };
  },

  toJSON(message: NoteSyncRecord): unknown {
    const obj: any = {};
    if (message.noteId !== undefined) {
      obj.noteId = NoteId.toJSON(message.noteId);
    }
    if (message.noteIndexInBlock !== 0) {
      obj.noteIndexInBlock = Math.round(message.noteIndexInBlock);
    }
    if (message.metadata !== undefined) {
      obj.metadata = NoteMetadata.toJSON(message.metadata);
    }
    if (message.inclusionPath !== undefined) {
      obj.inclusionPath = SparseMerklePath.toJSON(message.inclusionPath);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NoteSyncRecord>, I>>(base?: I): NoteSyncRecord {
    return NoteSyncRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoteSyncRecord>, I>>(object: I): NoteSyncRecord {
    const message = createBaseNoteSyncRecord();
    message.noteId = (object.noteId !== undefined && object.noteId !== null)
      ? NoteId.fromPartial(object.noteId)
      : undefined;
    message.noteIndexInBlock = object.noteIndexInBlock ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? NoteMetadata.fromPartial(object.metadata)
      : undefined;
    message.inclusionPath = (object.inclusionPath !== undefined && object.inclusionPath !== null)
      ? SparseMerklePath.fromPartial(object.inclusionPath)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
