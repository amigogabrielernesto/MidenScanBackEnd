// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: types/primitives.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "primitives";

/** Represents a single SMT leaf entry. */
export interface SmtLeafEntry {
  /** The key of the entry. */
  key:
    | Digest
    | undefined;
  /** The value of the entry. */
  value: Digest | undefined;
}

/** Represents multiple leaf entries in an SMT. */
export interface SmtLeafEntryList {
  /** The entries list. */
  entries: SmtLeafEntry[];
}

/** A leaf in an SMT, sitting at depth 64. A leaf can contain 0, 1 or multiple leaf entries. */
export interface SmtLeaf {
  /** An empty leaf index. */
  emptyLeafIndex?:
    | number
    | undefined;
  /** A single leaf entry. */
  single?:
    | SmtLeafEntry
    | undefined;
  /** Multiple leaf entries. */
  multiple?: SmtLeafEntryList | undefined;
}

/** The opening of a leaf in an SMT. */
export interface SmtOpening {
  /** The Merkle path to the leaf. */
  path:
    | MerklePath
    | undefined;
  /** The leaf itself. */
  leaf: SmtLeaf | undefined;
}

/** A different representation of a Merkle path designed for memory efficiency. */
export interface SparseMerklePath {
  /**
   * A bitmask representing empty nodes.
   *
   * The set bit corresponds to the depth of an empty node. The least significant bit (bit 0)
   * describes depth 1 node (root's children). The `bit index + 1` is equal to node's depth.
   */
  emptyNodesMask: number;
  /** The non-empty nodes, stored in depth-order, but not contiguous across depth. */
  siblings: Digest[];
}

/** Represents an MMR delta. */
export interface MmrDelta {
  /** The number of leaf nodes in the MMR. */
  forest: number;
  /** New and changed MMR peaks. */
  data: Digest[];
}

/** Represents a Merkle path. */
export interface MerklePath {
  /** List of sibling node hashes, in order from the root to the leaf. */
  siblings: Digest[];
}

/** A hash digest, the result of a hash function. */
export interface Digest {
  d0: number;
  d1: number;
  d2: number;
  d3: number;
}

function createBaseSmtLeafEntry(): SmtLeafEntry {
  return { key: undefined, value: undefined };
}

export const SmtLeafEntry: MessageFns<SmtLeafEntry> = {
  encode(message: SmtLeafEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      Digest.encode(message.key, writer.uint32(10).fork()).join();
    }
    if (message.value !== undefined) {
      Digest.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmtLeafEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmtLeafEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = Digest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Digest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmtLeafEntry {
    return {
      key: isSet(object.key) ? Digest.fromJSON(object.key) : undefined,
      value: isSet(object.value) ? Digest.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SmtLeafEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = Digest.toJSON(message.key);
    }
    if (message.value !== undefined) {
      obj.value = Digest.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SmtLeafEntry>, I>>(base?: I): SmtLeafEntry {
    return SmtLeafEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SmtLeafEntry>, I>>(object: I): SmtLeafEntry {
    const message = createBaseSmtLeafEntry();
    message.key = (object.key !== undefined && object.key !== null) ? Digest.fromPartial(object.key) : undefined;
    message.value = (object.value !== undefined && object.value !== null)
      ? Digest.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseSmtLeafEntryList(): SmtLeafEntryList {
  return { entries: [] };
}

export const SmtLeafEntryList: MessageFns<SmtLeafEntryList> = {
  encode(message: SmtLeafEntryList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      SmtLeafEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmtLeafEntryList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmtLeafEntryList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entries.push(SmtLeafEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmtLeafEntryList {
    return {
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => SmtLeafEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SmtLeafEntryList): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => SmtLeafEntry.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SmtLeafEntryList>, I>>(base?: I): SmtLeafEntryList {
    return SmtLeafEntryList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SmtLeafEntryList>, I>>(object: I): SmtLeafEntryList {
    const message = createBaseSmtLeafEntryList();
    message.entries = object.entries?.map((e) => SmtLeafEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSmtLeaf(): SmtLeaf {
  return { emptyLeafIndex: undefined, single: undefined, multiple: undefined };
}

export const SmtLeaf: MessageFns<SmtLeaf> = {
  encode(message: SmtLeaf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.emptyLeafIndex !== undefined) {
      writer.uint32(8).uint64(message.emptyLeafIndex);
    }
    if (message.single !== undefined) {
      SmtLeafEntry.encode(message.single, writer.uint32(18).fork()).join();
    }
    if (message.multiple !== undefined) {
      SmtLeafEntryList.encode(message.multiple, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmtLeaf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmtLeaf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.emptyLeafIndex = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.single = SmtLeafEntry.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.multiple = SmtLeafEntryList.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmtLeaf {
    return {
      emptyLeafIndex: isSet(object.emptyLeafIndex) ? globalThis.Number(object.emptyLeafIndex) : undefined,
      single: isSet(object.single) ? SmtLeafEntry.fromJSON(object.single) : undefined,
      multiple: isSet(object.multiple) ? SmtLeafEntryList.fromJSON(object.multiple) : undefined,
    };
  },

  toJSON(message: SmtLeaf): unknown {
    const obj: any = {};
    if (message.emptyLeafIndex !== undefined) {
      obj.emptyLeafIndex = Math.round(message.emptyLeafIndex);
    }
    if (message.single !== undefined) {
      obj.single = SmtLeafEntry.toJSON(message.single);
    }
    if (message.multiple !== undefined) {
      obj.multiple = SmtLeafEntryList.toJSON(message.multiple);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SmtLeaf>, I>>(base?: I): SmtLeaf {
    return SmtLeaf.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SmtLeaf>, I>>(object: I): SmtLeaf {
    const message = createBaseSmtLeaf();
    message.emptyLeafIndex = object.emptyLeafIndex ?? undefined;
    message.single = (object.single !== undefined && object.single !== null)
      ? SmtLeafEntry.fromPartial(object.single)
      : undefined;
    message.multiple = (object.multiple !== undefined && object.multiple !== null)
      ? SmtLeafEntryList.fromPartial(object.multiple)
      : undefined;
    return message;
  },
};

function createBaseSmtOpening(): SmtOpening {
  return { path: undefined, leaf: undefined };
}

export const SmtOpening: MessageFns<SmtOpening> = {
  encode(message: SmtOpening, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== undefined) {
      MerklePath.encode(message.path, writer.uint32(10).fork()).join();
    }
    if (message.leaf !== undefined) {
      SmtLeaf.encode(message.leaf, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmtOpening {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmtOpening();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = MerklePath.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.leaf = SmtLeaf.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmtOpening {
    return {
      path: isSet(object.path) ? MerklePath.fromJSON(object.path) : undefined,
      leaf: isSet(object.leaf) ? SmtLeaf.fromJSON(object.leaf) : undefined,
    };
  },

  toJSON(message: SmtOpening): unknown {
    const obj: any = {};
    if (message.path !== undefined) {
      obj.path = MerklePath.toJSON(message.path);
    }
    if (message.leaf !== undefined) {
      obj.leaf = SmtLeaf.toJSON(message.leaf);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SmtOpening>, I>>(base?: I): SmtOpening {
    return SmtOpening.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SmtOpening>, I>>(object: I): SmtOpening {
    const message = createBaseSmtOpening();
    message.path = (object.path !== undefined && object.path !== null)
      ? MerklePath.fromPartial(object.path)
      : undefined;
    message.leaf = (object.leaf !== undefined && object.leaf !== null) ? SmtLeaf.fromPartial(object.leaf) : undefined;
    return message;
  },
};

function createBaseSparseMerklePath(): SparseMerklePath {
  return { emptyNodesMask: 0, siblings: [] };
}

export const SparseMerklePath: MessageFns<SparseMerklePath> = {
  encode(message: SparseMerklePath, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.emptyNodesMask !== 0) {
      writer.uint32(9).fixed64(message.emptyNodesMask);
    }
    for (const v of message.siblings) {
      Digest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SparseMerklePath {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSparseMerklePath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.emptyNodesMask = longToNumber(reader.fixed64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.siblings.push(Digest.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SparseMerklePath {
    return {
      emptyNodesMask: isSet(object.emptyNodesMask) ? globalThis.Number(object.emptyNodesMask) : 0,
      siblings: globalThis.Array.isArray(object?.siblings) ? object.siblings.map((e: any) => Digest.fromJSON(e)) : [],
    };
  },

  toJSON(message: SparseMerklePath): unknown {
    const obj: any = {};
    if (message.emptyNodesMask !== 0) {
      obj.emptyNodesMask = Math.round(message.emptyNodesMask);
    }
    if (message.siblings?.length) {
      obj.siblings = message.siblings.map((e) => Digest.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SparseMerklePath>, I>>(base?: I): SparseMerklePath {
    return SparseMerklePath.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SparseMerklePath>, I>>(object: I): SparseMerklePath {
    const message = createBaseSparseMerklePath();
    message.emptyNodesMask = object.emptyNodesMask ?? 0;
    message.siblings = object.siblings?.map((e) => Digest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMmrDelta(): MmrDelta {
  return { forest: 0, data: [] };
}

export const MmrDelta: MessageFns<MmrDelta> = {
  encode(message: MmrDelta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.forest !== 0) {
      writer.uint32(8).uint64(message.forest);
    }
    for (const v of message.data) {
      Digest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MmrDelta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMmrDelta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.forest = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data.push(Digest.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MmrDelta {
    return {
      forest: isSet(object.forest) ? globalThis.Number(object.forest) : 0,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Digest.fromJSON(e)) : [],
    };
  },

  toJSON(message: MmrDelta): unknown {
    const obj: any = {};
    if (message.forest !== 0) {
      obj.forest = Math.round(message.forest);
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => Digest.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MmrDelta>, I>>(base?: I): MmrDelta {
    return MmrDelta.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MmrDelta>, I>>(object: I): MmrDelta {
    const message = createBaseMmrDelta();
    message.forest = object.forest ?? 0;
    message.data = object.data?.map((e) => Digest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMerklePath(): MerklePath {
  return { siblings: [] };
}

export const MerklePath: MessageFns<MerklePath> = {
  encode(message: MerklePath, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.siblings) {
      Digest.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MerklePath {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMerklePath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.siblings.push(Digest.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MerklePath {
    return {
      siblings: globalThis.Array.isArray(object?.siblings) ? object.siblings.map((e: any) => Digest.fromJSON(e)) : [],
    };
  },

  toJSON(message: MerklePath): unknown {
    const obj: any = {};
    if (message.siblings?.length) {
      obj.siblings = message.siblings.map((e) => Digest.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MerklePath>, I>>(base?: I): MerklePath {
    return MerklePath.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MerklePath>, I>>(object: I): MerklePath {
    const message = createBaseMerklePath();
    message.siblings = object.siblings?.map((e) => Digest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDigest(): Digest {
  return { d0: 0, d1: 0, d2: 0, d3: 0 };
}

export const Digest: MessageFns<Digest> = {
  encode(message: Digest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.d0 !== 0) {
      writer.uint32(9).fixed64(message.d0);
    }
    if (message.d1 !== 0) {
      writer.uint32(17).fixed64(message.d1);
    }
    if (message.d2 !== 0) {
      writer.uint32(25).fixed64(message.d2);
    }
    if (message.d3 !== 0) {
      writer.uint32(33).fixed64(message.d3);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Digest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDigest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.d0 = longToNumber(reader.fixed64());
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.d1 = longToNumber(reader.fixed64());
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.d2 = longToNumber(reader.fixed64());
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.d3 = longToNumber(reader.fixed64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Digest {
    return {
      d0: isSet(object.d0) ? globalThis.Number(object.d0) : 0,
      d1: isSet(object.d1) ? globalThis.Number(object.d1) : 0,
      d2: isSet(object.d2) ? globalThis.Number(object.d2) : 0,
      d3: isSet(object.d3) ? globalThis.Number(object.d3) : 0,
    };
  },

  toJSON(message: Digest): unknown {
    const obj: any = {};
    if (message.d0 !== 0) {
      obj.d0 = Math.round(message.d0);
    }
    if (message.d1 !== 0) {
      obj.d1 = Math.round(message.d1);
    }
    if (message.d2 !== 0) {
      obj.d2 = Math.round(message.d2);
    }
    if (message.d3 !== 0) {
      obj.d3 = Math.round(message.d3);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Digest>, I>>(base?: I): Digest {
    return Digest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Digest>, I>>(object: I): Digest {
    const message = createBaseDigest();
    message.d0 = object.d0 ?? 0;
    message.d1 = object.d1 ?? 0;
    message.d2 = object.d2 ?? 0;
    message.d3 = object.d3 ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
