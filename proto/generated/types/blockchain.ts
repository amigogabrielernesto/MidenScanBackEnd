// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: types/blockchain.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Digest } from "./primitives";

export const protobufPackage = "blockchain";

/** Represents a block. */
export interface Block {
  /**
   * Block data encoded using [winter_utils::Serializable] implementation for
   * [miden_objects::block::Block].
   */
  block: Uint8Array;
}

/** Represents a block or nothing. */
export interface MaybeBlock {
  /**
   * The requested block data encoded using [winter_utils::Serializable] implementation for
   * [miden_objects::block::Block].
   */
  block?: Uint8Array | undefined;
}

/** Represents a block number. */
export interface BlockNumber {
  /** The block number of the target block. */
  blockNum: number;
}

/** Represents a block number or nothing. */
export interface MaybeBlockNumber {
  /** The block number of the target block. */
  blockNum?: number | undefined;
}

/** Represents a block header. */
export interface BlockHeader {
  /** Specifies the version of the protocol. */
  version: number;
  /** The commitment of the previous blocks header. */
  prevBlockCommitment:
    | Digest
    | undefined;
  /** A unique sequential number of the current block. */
  blockNum: number;
  /** A commitment to an MMR of the entire chain where each block is a leaf. */
  chainCommitment:
    | Digest
    | undefined;
  /** A commitment to account database. */
  accountRoot:
    | Digest
    | undefined;
  /** A commitment to the nullifier database. */
  nullifierRoot:
    | Digest
    | undefined;
  /** A commitment to all notes created in the current block. */
  noteRoot:
    | Digest
    | undefined;
  /** A commitment to a set of IDs of transactions which affected accounts in this block. */
  txCommitment:
    | Digest
    | undefined;
  /** A commitment to a STARK proof attesting to the correct state transition. */
  proofCommitment:
    | Digest
    | undefined;
  /** A commitment to all transaction kernels supported by this block. */
  txKernelCommitment:
    | Digest
    | undefined;
  /** The time when the block was created. */
  timestamp: number;
}

function createBaseBlock(): Block {
  return { block: new Uint8Array(0) };
}

export const Block: MessageFns<Block> = {
  encode(message: Block, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.block.length !== 0) {
      writer.uint32(10).bytes(message.block);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Block {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.block = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Block {
    return { block: isSet(object.block) ? bytesFromBase64(object.block) : new Uint8Array(0) };
  },

  toJSON(message: Block): unknown {
    const obj: any = {};
    if (message.block.length !== 0) {
      obj.block = base64FromBytes(message.block);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Block>, I>>(base?: I): Block {
    return Block.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Block>, I>>(object: I): Block {
    const message = createBaseBlock();
    message.block = object.block ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMaybeBlock(): MaybeBlock {
  return { block: undefined };
}

export const MaybeBlock: MessageFns<MaybeBlock> = {
  encode(message: MaybeBlock, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.block !== undefined) {
      writer.uint32(10).bytes(message.block);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MaybeBlock {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMaybeBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.block = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MaybeBlock {
    return { block: isSet(object.block) ? bytesFromBase64(object.block) : undefined };
  },

  toJSON(message: MaybeBlock): unknown {
    const obj: any = {};
    if (message.block !== undefined) {
      obj.block = base64FromBytes(message.block);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MaybeBlock>, I>>(base?: I): MaybeBlock {
    return MaybeBlock.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MaybeBlock>, I>>(object: I): MaybeBlock {
    const message = createBaseMaybeBlock();
    message.block = object.block ?? undefined;
    return message;
  },
};

function createBaseBlockNumber(): BlockNumber {
  return { blockNum: 0 };
}

export const BlockNumber: MessageFns<BlockNumber> = {
  encode(message: BlockNumber, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockNum !== 0) {
      writer.uint32(13).fixed32(message.blockNum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockNumber {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockNumber();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.blockNum = reader.fixed32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockNumber {
    return { blockNum: isSet(object.blockNum) ? globalThis.Number(object.blockNum) : 0 };
  },

  toJSON(message: BlockNumber): unknown {
    const obj: any = {};
    if (message.blockNum !== 0) {
      obj.blockNum = Math.round(message.blockNum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockNumber>, I>>(base?: I): BlockNumber {
    return BlockNumber.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockNumber>, I>>(object: I): BlockNumber {
    const message = createBaseBlockNumber();
    message.blockNum = object.blockNum ?? 0;
    return message;
  },
};

function createBaseMaybeBlockNumber(): MaybeBlockNumber {
  return { blockNum: undefined };
}

export const MaybeBlockNumber: MessageFns<MaybeBlockNumber> = {
  encode(message: MaybeBlockNumber, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockNum !== undefined) {
      writer.uint32(13).fixed32(message.blockNum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MaybeBlockNumber {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMaybeBlockNumber();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.blockNum = reader.fixed32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MaybeBlockNumber {
    return { blockNum: isSet(object.blockNum) ? globalThis.Number(object.blockNum) : undefined };
  },

  toJSON(message: MaybeBlockNumber): unknown {
    const obj: any = {};
    if (message.blockNum !== undefined) {
      obj.blockNum = Math.round(message.blockNum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MaybeBlockNumber>, I>>(base?: I): MaybeBlockNumber {
    return MaybeBlockNumber.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MaybeBlockNumber>, I>>(object: I): MaybeBlockNumber {
    const message = createBaseMaybeBlockNumber();
    message.blockNum = object.blockNum ?? undefined;
    return message;
  },
};

function createBaseBlockHeader(): BlockHeader {
  return {
    version: 0,
    prevBlockCommitment: undefined,
    blockNum: 0,
    chainCommitment: undefined,
    accountRoot: undefined,
    nullifierRoot: undefined,
    noteRoot: undefined,
    txCommitment: undefined,
    proofCommitment: undefined,
    txKernelCommitment: undefined,
    timestamp: 0,
  };
}

export const BlockHeader: MessageFns<BlockHeader> = {
  encode(message: BlockHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== 0) {
      writer.uint32(8).uint32(message.version);
    }
    if (message.prevBlockCommitment !== undefined) {
      Digest.encode(message.prevBlockCommitment, writer.uint32(18).fork()).join();
    }
    if (message.blockNum !== 0) {
      writer.uint32(29).fixed32(message.blockNum);
    }
    if (message.chainCommitment !== undefined) {
      Digest.encode(message.chainCommitment, writer.uint32(34).fork()).join();
    }
    if (message.accountRoot !== undefined) {
      Digest.encode(message.accountRoot, writer.uint32(42).fork()).join();
    }
    if (message.nullifierRoot !== undefined) {
      Digest.encode(message.nullifierRoot, writer.uint32(50).fork()).join();
    }
    if (message.noteRoot !== undefined) {
      Digest.encode(message.noteRoot, writer.uint32(58).fork()).join();
    }
    if (message.txCommitment !== undefined) {
      Digest.encode(message.txCommitment, writer.uint32(66).fork()).join();
    }
    if (message.proofCommitment !== undefined) {
      Digest.encode(message.proofCommitment, writer.uint32(74).fork()).join();
    }
    if (message.txKernelCommitment !== undefined) {
      Digest.encode(message.txKernelCommitment, writer.uint32(82).fork()).join();
    }
    if (message.timestamp !== 0) {
      writer.uint32(93).fixed32(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.prevBlockCommitment = Digest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.blockNum = reader.fixed32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.chainCommitment = Digest.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.accountRoot = Digest.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.nullifierRoot = Digest.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.noteRoot = Digest.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.txCommitment = Digest.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.proofCommitment = Digest.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.txKernelCommitment = Digest.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 93) {
            break;
          }

          message.timestamp = reader.fixed32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockHeader {
    return {
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      prevBlockCommitment: isSet(object.prevBlockCommitment) ? Digest.fromJSON(object.prevBlockCommitment) : undefined,
      blockNum: isSet(object.blockNum) ? globalThis.Number(object.blockNum) : 0,
      chainCommitment: isSet(object.chainCommitment) ? Digest.fromJSON(object.chainCommitment) : undefined,
      accountRoot: isSet(object.accountRoot) ? Digest.fromJSON(object.accountRoot) : undefined,
      nullifierRoot: isSet(object.nullifierRoot) ? Digest.fromJSON(object.nullifierRoot) : undefined,
      noteRoot: isSet(object.noteRoot) ? Digest.fromJSON(object.noteRoot) : undefined,
      txCommitment: isSet(object.txCommitment) ? Digest.fromJSON(object.txCommitment) : undefined,
      proofCommitment: isSet(object.proofCommitment) ? Digest.fromJSON(object.proofCommitment) : undefined,
      txKernelCommitment: isSet(object.txKernelCommitment) ? Digest.fromJSON(object.txKernelCommitment) : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: BlockHeader): unknown {
    const obj: any = {};
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.prevBlockCommitment !== undefined) {
      obj.prevBlockCommitment = Digest.toJSON(message.prevBlockCommitment);
    }
    if (message.blockNum !== 0) {
      obj.blockNum = Math.round(message.blockNum);
    }
    if (message.chainCommitment !== undefined) {
      obj.chainCommitment = Digest.toJSON(message.chainCommitment);
    }
    if (message.accountRoot !== undefined) {
      obj.accountRoot = Digest.toJSON(message.accountRoot);
    }
    if (message.nullifierRoot !== undefined) {
      obj.nullifierRoot = Digest.toJSON(message.nullifierRoot);
    }
    if (message.noteRoot !== undefined) {
      obj.noteRoot = Digest.toJSON(message.noteRoot);
    }
    if (message.txCommitment !== undefined) {
      obj.txCommitment = Digest.toJSON(message.txCommitment);
    }
    if (message.proofCommitment !== undefined) {
      obj.proofCommitment = Digest.toJSON(message.proofCommitment);
    }
    if (message.txKernelCommitment !== undefined) {
      obj.txKernelCommitment = Digest.toJSON(message.txKernelCommitment);
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockHeader>, I>>(base?: I): BlockHeader {
    return BlockHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockHeader>, I>>(object: I): BlockHeader {
    const message = createBaseBlockHeader();
    message.version = object.version ?? 0;
    message.prevBlockCommitment = (object.prevBlockCommitment !== undefined && object.prevBlockCommitment !== null)
      ? Digest.fromPartial(object.prevBlockCommitment)
      : undefined;
    message.blockNum = object.blockNum ?? 0;
    message.chainCommitment = (object.chainCommitment !== undefined && object.chainCommitment !== null)
      ? Digest.fromPartial(object.chainCommitment)
      : undefined;
    message.accountRoot = (object.accountRoot !== undefined && object.accountRoot !== null)
      ? Digest.fromPartial(object.accountRoot)
      : undefined;
    message.nullifierRoot = (object.nullifierRoot !== undefined && object.nullifierRoot !== null)
      ? Digest.fromPartial(object.nullifierRoot)
      : undefined;
    message.noteRoot = (object.noteRoot !== undefined && object.noteRoot !== null)
      ? Digest.fromPartial(object.noteRoot)
      : undefined;
    message.txCommitment = (object.txCommitment !== undefined && object.txCommitment !== null)
      ? Digest.fromPartial(object.txCommitment)
      : undefined;
    message.proofCommitment = (object.proofCommitment !== undefined && object.proofCommitment !== null)
      ? Digest.fromPartial(object.proofCommitment)
      : undefined;
    message.txKernelCommitment = (object.txKernelCommitment !== undefined && object.txKernelCommitment !== null)
      ? Digest.fromPartial(object.txKernelCommitment)
      : undefined;
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
