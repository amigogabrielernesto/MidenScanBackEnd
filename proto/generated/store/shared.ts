// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: store/shared.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BlockHeader } from "../types/blockchain";
import { MerklePath } from "../types/primitives";

export const protobufPackage = "shared";

/** Shared messages for the store RPC. */

/**
 * Returns the block header corresponding to the requested block number, as well as the merkle
 * path and current forest which validate the block's inclusion in the chain.
 *
 * The Merkle path is an MMR proof for the block's leaf, based on the current chain length.
 */
export interface BlockHeaderByNumberRequest {
  /** The target block height, defaults to latest if not provided. */
  blockNum?:
    | number
    | undefined;
  /** Whether or not to return authentication data for the block header. */
  includeMmrProof?: boolean | undefined;
}

/** Represents the result of getting a block header by block number. */
export interface BlockHeaderByNumberResponse {
  /** The requested block header. */
  blockHeader:
    | BlockHeader
    | undefined;
  /** Merkle path to verify the block's inclusion in the MMR at the returned `chain_length`. */
  mmrPath?:
    | MerklePath
    | undefined;
  /** Current chain length. */
  chainLength?: number | undefined;
}

function createBaseBlockHeaderByNumberRequest(): BlockHeaderByNumberRequest {
  return { blockNum: undefined, includeMmrProof: undefined };
}

export const BlockHeaderByNumberRequest: MessageFns<BlockHeaderByNumberRequest> = {
  encode(message: BlockHeaderByNumberRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockNum !== undefined) {
      writer.uint32(8).uint32(message.blockNum);
    }
    if (message.includeMmrProof !== undefined) {
      writer.uint32(16).bool(message.includeMmrProof);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockHeaderByNumberRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockHeaderByNumberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockNum = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.includeMmrProof = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockHeaderByNumberRequest {
    return {
      blockNum: isSet(object.blockNum) ? globalThis.Number(object.blockNum) : undefined,
      includeMmrProof: isSet(object.includeMmrProof) ? globalThis.Boolean(object.includeMmrProof) : undefined,
    };
  },

  toJSON(message: BlockHeaderByNumberRequest): unknown {
    const obj: any = {};
    if (message.blockNum !== undefined) {
      obj.blockNum = Math.round(message.blockNum);
    }
    if (message.includeMmrProof !== undefined) {
      obj.includeMmrProof = message.includeMmrProof;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockHeaderByNumberRequest>, I>>(base?: I): BlockHeaderByNumberRequest {
    return BlockHeaderByNumberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockHeaderByNumberRequest>, I>>(object: I): BlockHeaderByNumberRequest {
    const message = createBaseBlockHeaderByNumberRequest();
    message.blockNum = object.blockNum ?? undefined;
    message.includeMmrProof = object.includeMmrProof ?? undefined;
    return message;
  },
};

function createBaseBlockHeaderByNumberResponse(): BlockHeaderByNumberResponse {
  return { blockHeader: undefined, mmrPath: undefined, chainLength: undefined };
}

export const BlockHeaderByNumberResponse: MessageFns<BlockHeaderByNumberResponse> = {
  encode(message: BlockHeaderByNumberResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeader !== undefined) {
      BlockHeader.encode(message.blockHeader, writer.uint32(10).fork()).join();
    }
    if (message.mmrPath !== undefined) {
      MerklePath.encode(message.mmrPath, writer.uint32(18).fork()).join();
    }
    if (message.chainLength !== undefined) {
      writer.uint32(29).fixed32(message.chainLength);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockHeaderByNumberResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockHeaderByNumberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blockHeader = BlockHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mmrPath = MerklePath.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.chainLength = reader.fixed32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockHeaderByNumberResponse {
    return {
      blockHeader: isSet(object.blockHeader) ? BlockHeader.fromJSON(object.blockHeader) : undefined,
      mmrPath: isSet(object.mmrPath) ? MerklePath.fromJSON(object.mmrPath) : undefined,
      chainLength: isSet(object.chainLength) ? globalThis.Number(object.chainLength) : undefined,
    };
  },

  toJSON(message: BlockHeaderByNumberResponse): unknown {
    const obj: any = {};
    if (message.blockHeader !== undefined) {
      obj.blockHeader = BlockHeader.toJSON(message.blockHeader);
    }
    if (message.mmrPath !== undefined) {
      obj.mmrPath = MerklePath.toJSON(message.mmrPath);
    }
    if (message.chainLength !== undefined) {
      obj.chainLength = Math.round(message.chainLength);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockHeaderByNumberResponse>, I>>(base?: I): BlockHeaderByNumberResponse {
    return BlockHeaderByNumberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockHeaderByNumberResponse>, I>>(object: I): BlockHeaderByNumberResponse {
    const message = createBaseBlockHeaderByNumberResponse();
    message.blockHeader = (object.blockHeader !== undefined && object.blockHeader !== null)
      ? BlockHeader.fromPartial(object.blockHeader)
      : undefined;
    message.mmrPath = (object.mmrPath !== undefined && object.mmrPath !== null)
      ? MerklePath.fromPartial(object.mmrPath)
      : undefined;
    message.chainLength = object.chainLength ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
