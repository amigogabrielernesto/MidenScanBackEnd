// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: block_producer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { Empty } from "./google/protobuf/empty";
import { BlockHeader } from "./types/blockchain";
import { NetworkNote } from "./types/note";
import { Digest } from "./types/primitives";
import { ProvenTransaction, TransactionId } from "./types/transaction";

export const protobufPackage = "block_producer";

/** Specification of the user facing gRPC API. */

/** Represents the status of the block producer. */
export interface BlockProducerStatus {
  /** The block producer's running version. */
  version: string;
  /** The block producer's status. */
  status: string;
}

/** Represents the result of submitting proven transaction. */
export interface SubmitProvenTransactionResponse {
  /** The node's current block height. */
  blockHeight: number;
}

/** Request to subscribe to mempool events. */
export interface MempoolSubscriptionRequest {
  /**
   * The caller's current chain height.
   *
   * Request will be rejected if this does not match the mempool's current view.
   */
  chainTip: number;
}

/** Event from the mempool. */
export interface MempoolEvent {
  transactionAdded?: MempoolEvent_TransactionAdded | undefined;
  blockCommitted?: MempoolEvent_BlockCommitted | undefined;
  transactionsReverted?: MempoolEvent_TransactionsReverted | undefined;
}

/**
 * A block was committed.
 *
 * This event is sent when a block is committed to the chain.
 */
export interface MempoolEvent_BlockCommitted {
  blockHeader: BlockHeader | undefined;
  transactions: TransactionId[];
}

/**
 * A transaction was added to the mempool.
 *
 * This event is sent when a transaction is added to the mempool.
 */
export interface MempoolEvent_TransactionAdded {
  /** The ID of the transaction. */
  id:
    | TransactionId
    | undefined;
  /** Nullifiers consumed by the transaction. */
  nullifiers: Digest[];
  /** Network notes created by the transaction. */
  networkNotes: NetworkNote[];
  /**
   * Changes to a network account, if any. This includes creation of new network accounts.
   *
   * The account delta is encoded using [winter_utils::Serializable] implementation
   * for [miden_objects::account::delta::AccountDelta].
   */
  networkAccountDelta?: Uint8Array | undefined;
}

/**
 * A set of transactions was reverted and dropped from the mempool.
 *
 * This event is sent when a set of transactions are reverted and dropped from the mempool.
 */
export interface MempoolEvent_TransactionsReverted {
  reverted: TransactionId[];
}

function createBaseBlockProducerStatus(): BlockProducerStatus {
  return { version: "", status: "" };
}

export const BlockProducerStatus: MessageFns<BlockProducerStatus> = {
  encode(message: BlockProducerStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockProducerStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockProducerStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockProducerStatus {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: BlockProducerStatus): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockProducerStatus>, I>>(base?: I): BlockProducerStatus {
    return BlockProducerStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockProducerStatus>, I>>(object: I): BlockProducerStatus {
    const message = createBaseBlockProducerStatus();
    message.version = object.version ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseSubmitProvenTransactionResponse(): SubmitProvenTransactionResponse {
  return { blockHeight: 0 };
}

export const SubmitProvenTransactionResponse: MessageFns<SubmitProvenTransactionResponse> = {
  encode(message: SubmitProvenTransactionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeight !== 0) {
      writer.uint32(13).fixed32(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitProvenTransactionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitProvenTransactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.blockHeight = reader.fixed32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitProvenTransactionResponse {
    return { blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0 };
  },

  toJSON(message: SubmitProvenTransactionResponse): unknown {
    const obj: any = {};
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitProvenTransactionResponse>, I>>(base?: I): SubmitProvenTransactionResponse {
    return SubmitProvenTransactionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitProvenTransactionResponse>, I>>(
    object: I,
  ): SubmitProvenTransactionResponse {
    const message = createBaseSubmitProvenTransactionResponse();
    message.blockHeight = object.blockHeight ?? 0;
    return message;
  },
};

function createBaseMempoolSubscriptionRequest(): MempoolSubscriptionRequest {
  return { chainTip: 0 };
}

export const MempoolSubscriptionRequest: MessageFns<MempoolSubscriptionRequest> = {
  encode(message: MempoolSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chainTip !== 0) {
      writer.uint32(13).fixed32(message.chainTip);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MempoolSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMempoolSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.chainTip = reader.fixed32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MempoolSubscriptionRequest {
    return { chainTip: isSet(object.chainTip) ? globalThis.Number(object.chainTip) : 0 };
  },

  toJSON(message: MempoolSubscriptionRequest): unknown {
    const obj: any = {};
    if (message.chainTip !== 0) {
      obj.chainTip = Math.round(message.chainTip);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MempoolSubscriptionRequest>, I>>(base?: I): MempoolSubscriptionRequest {
    return MempoolSubscriptionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MempoolSubscriptionRequest>, I>>(object: I): MempoolSubscriptionRequest {
    const message = createBaseMempoolSubscriptionRequest();
    message.chainTip = object.chainTip ?? 0;
    return message;
  },
};

function createBaseMempoolEvent(): MempoolEvent {
  return { transactionAdded: undefined, blockCommitted: undefined, transactionsReverted: undefined };
}

export const MempoolEvent: MessageFns<MempoolEvent> = {
  encode(message: MempoolEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionAdded !== undefined) {
      MempoolEvent_TransactionAdded.encode(message.transactionAdded, writer.uint32(10).fork()).join();
    }
    if (message.blockCommitted !== undefined) {
      MempoolEvent_BlockCommitted.encode(message.blockCommitted, writer.uint32(18).fork()).join();
    }
    if (message.transactionsReverted !== undefined) {
      MempoolEvent_TransactionsReverted.encode(message.transactionsReverted, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MempoolEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMempoolEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactionAdded = MempoolEvent_TransactionAdded.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.blockCommitted = MempoolEvent_BlockCommitted.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.transactionsReverted = MempoolEvent_TransactionsReverted.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MempoolEvent {
    return {
      transactionAdded: isSet(object.transactionAdded)
        ? MempoolEvent_TransactionAdded.fromJSON(object.transactionAdded)
        : undefined,
      blockCommitted: isSet(object.blockCommitted)
        ? MempoolEvent_BlockCommitted.fromJSON(object.blockCommitted)
        : undefined,
      transactionsReverted: isSet(object.transactionsReverted)
        ? MempoolEvent_TransactionsReverted.fromJSON(object.transactionsReverted)
        : undefined,
    };
  },

  toJSON(message: MempoolEvent): unknown {
    const obj: any = {};
    if (message.transactionAdded !== undefined) {
      obj.transactionAdded = MempoolEvent_TransactionAdded.toJSON(message.transactionAdded);
    }
    if (message.blockCommitted !== undefined) {
      obj.blockCommitted = MempoolEvent_BlockCommitted.toJSON(message.blockCommitted);
    }
    if (message.transactionsReverted !== undefined) {
      obj.transactionsReverted = MempoolEvent_TransactionsReverted.toJSON(message.transactionsReverted);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MempoolEvent>, I>>(base?: I): MempoolEvent {
    return MempoolEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MempoolEvent>, I>>(object: I): MempoolEvent {
    const message = createBaseMempoolEvent();
    message.transactionAdded = (object.transactionAdded !== undefined && object.transactionAdded !== null)
      ? MempoolEvent_TransactionAdded.fromPartial(object.transactionAdded)
      : undefined;
    message.blockCommitted = (object.blockCommitted !== undefined && object.blockCommitted !== null)
      ? MempoolEvent_BlockCommitted.fromPartial(object.blockCommitted)
      : undefined;
    message.transactionsReverted = (object.transactionsReverted !== undefined && object.transactionsReverted !== null)
      ? MempoolEvent_TransactionsReverted.fromPartial(object.transactionsReverted)
      : undefined;
    return message;
  },
};

function createBaseMempoolEvent_BlockCommitted(): MempoolEvent_BlockCommitted {
  return { blockHeader: undefined, transactions: [] };
}

export const MempoolEvent_BlockCommitted: MessageFns<MempoolEvent_BlockCommitted> = {
  encode(message: MempoolEvent_BlockCommitted, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeader !== undefined) {
      BlockHeader.encode(message.blockHeader, writer.uint32(10).fork()).join();
    }
    for (const v of message.transactions) {
      TransactionId.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MempoolEvent_BlockCommitted {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMempoolEvent_BlockCommitted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blockHeader = BlockHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transactions.push(TransactionId.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MempoolEvent_BlockCommitted {
    return {
      blockHeader: isSet(object.blockHeader) ? BlockHeader.fromJSON(object.blockHeader) : undefined,
      transactions: globalThis.Array.isArray(object?.transactions)
        ? object.transactions.map((e: any) => TransactionId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MempoolEvent_BlockCommitted): unknown {
    const obj: any = {};
    if (message.blockHeader !== undefined) {
      obj.blockHeader = BlockHeader.toJSON(message.blockHeader);
    }
    if (message.transactions?.length) {
      obj.transactions = message.transactions.map((e) => TransactionId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MempoolEvent_BlockCommitted>, I>>(base?: I): MempoolEvent_BlockCommitted {
    return MempoolEvent_BlockCommitted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MempoolEvent_BlockCommitted>, I>>(object: I): MempoolEvent_BlockCommitted {
    const message = createBaseMempoolEvent_BlockCommitted();
    message.blockHeader = (object.blockHeader !== undefined && object.blockHeader !== null)
      ? BlockHeader.fromPartial(object.blockHeader)
      : undefined;
    message.transactions = object.transactions?.map((e) => TransactionId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMempoolEvent_TransactionAdded(): MempoolEvent_TransactionAdded {
  return { id: undefined, nullifiers: [], networkNotes: [], networkAccountDelta: undefined };
}

export const MempoolEvent_TransactionAdded: MessageFns<MempoolEvent_TransactionAdded> = {
  encode(message: MempoolEvent_TransactionAdded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      TransactionId.encode(message.id, writer.uint32(10).fork()).join();
    }
    for (const v of message.nullifiers) {
      Digest.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.networkNotes) {
      NetworkNote.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.networkAccountDelta !== undefined) {
      writer.uint32(34).bytes(message.networkAccountDelta);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MempoolEvent_TransactionAdded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMempoolEvent_TransactionAdded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = TransactionId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nullifiers.push(Digest.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.networkNotes.push(NetworkNote.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.networkAccountDelta = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MempoolEvent_TransactionAdded {
    return {
      id: isSet(object.id) ? TransactionId.fromJSON(object.id) : undefined,
      nullifiers: globalThis.Array.isArray(object?.nullifiers)
        ? object.nullifiers.map((e: any) => Digest.fromJSON(e))
        : [],
      networkNotes: globalThis.Array.isArray(object?.networkNotes)
        ? object.networkNotes.map((e: any) => NetworkNote.fromJSON(e))
        : [],
      networkAccountDelta: isSet(object.networkAccountDelta) ? bytesFromBase64(object.networkAccountDelta) : undefined,
    };
  },

  toJSON(message: MempoolEvent_TransactionAdded): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = TransactionId.toJSON(message.id);
    }
    if (message.nullifiers?.length) {
      obj.nullifiers = message.nullifiers.map((e) => Digest.toJSON(e));
    }
    if (message.networkNotes?.length) {
      obj.networkNotes = message.networkNotes.map((e) => NetworkNote.toJSON(e));
    }
    if (message.networkAccountDelta !== undefined) {
      obj.networkAccountDelta = base64FromBytes(message.networkAccountDelta);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MempoolEvent_TransactionAdded>, I>>(base?: I): MempoolEvent_TransactionAdded {
    return MempoolEvent_TransactionAdded.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MempoolEvent_TransactionAdded>, I>>(
    object: I,
  ): MempoolEvent_TransactionAdded {
    const message = createBaseMempoolEvent_TransactionAdded();
    message.id = (object.id !== undefined && object.id !== null) ? TransactionId.fromPartial(object.id) : undefined;
    message.nullifiers = object.nullifiers?.map((e) => Digest.fromPartial(e)) || [];
    message.networkNotes = object.networkNotes?.map((e) => NetworkNote.fromPartial(e)) || [];
    message.networkAccountDelta = object.networkAccountDelta ?? undefined;
    return message;
  },
};

function createBaseMempoolEvent_TransactionsReverted(): MempoolEvent_TransactionsReverted {
  return { reverted: [] };
}

export const MempoolEvent_TransactionsReverted: MessageFns<MempoolEvent_TransactionsReverted> = {
  encode(message: MempoolEvent_TransactionsReverted, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.reverted) {
      TransactionId.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MempoolEvent_TransactionsReverted {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMempoolEvent_TransactionsReverted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reverted.push(TransactionId.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MempoolEvent_TransactionsReverted {
    return {
      reverted: globalThis.Array.isArray(object?.reverted)
        ? object.reverted.map((e: any) => TransactionId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MempoolEvent_TransactionsReverted): unknown {
    const obj: any = {};
    if (message.reverted?.length) {
      obj.reverted = message.reverted.map((e) => TransactionId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MempoolEvent_TransactionsReverted>, I>>(
    base?: I,
  ): MempoolEvent_TransactionsReverted {
    return MempoolEvent_TransactionsReverted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MempoolEvent_TransactionsReverted>, I>>(
    object: I,
  ): MempoolEvent_TransactionsReverted {
    const message = createBaseMempoolEvent_TransactionsReverted();
    message.reverted = object.reverted?.map((e) => TransactionId.fromPartial(e)) || [];
    return message;
  },
};

export interface Api {
  /** Returns the status info. */
  Status(request: Empty): Promise<BlockProducerStatus>;
  /** Submits proven transaction to the Miden network */
  SubmitProvenTransaction(request: ProvenTransaction): Promise<SubmitProvenTransactionResponse>;
  /**
   * Subscribe to mempool events.
   *
   * The request will be rejected if the caller and the mempool disagree on the current chain tip.
   * This prevents potential desync issues. The caller can resolve this by resync'ing its chain state.
   *
   * The event stream will contain all events after the chain tip. This includes all currently inflight
   * events that have not yet been committed to the chain.
   *
   * Currently only a single active subscription is supported. Subscription requests will cancel the active
   * subscription, if any.
   */
  MempoolSubscription(request: MempoolSubscriptionRequest): Observable<MempoolEvent>;
}

export const ApiServiceName = "block_producer.Api";
export class ApiClientImpl implements Api {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ApiServiceName;
    this.rpc = rpc;
    this.Status = this.Status.bind(this);
    this.SubmitProvenTransaction = this.SubmitProvenTransaction.bind(this);
    this.MempoolSubscription = this.MempoolSubscription.bind(this);
  }
  Status(request: Empty): Promise<BlockProducerStatus> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "Status", data);
    return promise.then((data) => BlockProducerStatus.decode(new BinaryReader(data)));
  }

  SubmitProvenTransaction(request: ProvenTransaction): Promise<SubmitProvenTransactionResponse> {
    const data = ProvenTransaction.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitProvenTransaction", data);
    return promise.then((data) => SubmitProvenTransactionResponse.decode(new BinaryReader(data)));
  }

  MempoolSubscription(request: MempoolSubscriptionRequest): Observable<MempoolEvent> {
    const data = MempoolSubscriptionRequest.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "MempoolSubscription", data);
    return result.pipe(map((data) => MempoolEvent.decode(new BinaryReader(data))));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
