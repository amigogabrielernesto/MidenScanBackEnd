// Specification of the store RPC.
//
// This provided access to the blockchain data to the other nodes.
syntax = "proto3";
package rpc_store;

import "google/protobuf/empty.proto";
import "types/account.proto";
import "types/blockchain.proto";
import "types/transaction.proto";
import "types/note.proto";
import "types/primitives.proto";
import "store/shared.proto";

// RPC STORE API
// ================================================================================================

// Store API for the RPC component
service Rpc {
    // Returns the status info.
    rpc Status(google.protobuf.Empty) returns (StoreStatus) {}

    // Returns a nullifier proof for each of the requested nullifiers.
    rpc CheckNullifiers(NullifierList) returns (CheckNullifiersResponse) {}

    // Returns a list of nullifiers that match the specified prefixes and are recorded in the node.
    //
    // Note that only 16-bit prefixes are supported at this time.
    rpc CheckNullifiersByPrefix(CheckNullifiersByPrefixRequest) returns (CheckNullifiersByPrefixResponse) {}

    // Returns the latest state of an account with the specified ID.
    rpc GetAccountDetails(account.AccountId) returns (account.AccountDetails) {}

    // Returns the latest state proofs of the specified accounts.
    rpc GetAccountProofs(AccountProofsRequest) returns (AccountProofs) {}

    // Returns delta of the account states in the range from `from_block_num` (exclusive) to
    // `to_block_num` (inclusive).
    rpc GetAccountStateDelta(AccountStateDeltaRequest) returns (AccountStateDelta) {}

    // Returns raw block data for the specified block number.
    rpc GetBlockByNumber(blockchain.BlockNumber) returns (blockchain.MaybeBlock) {}

    // Retrieves block header by given block number. Optionally, it also returns the MMR path
    // and current chain length to authenticate the block's inclusion.
    rpc GetBlockHeaderByNumber(shared.BlockHeaderByNumberRequest) returns (shared.BlockHeaderByNumberResponse) {}

    // Returns a list of committed notes matching the provided note IDs.
    rpc GetNotesById(note.NoteIdList) returns (note.CommittedNoteList) {}

    // Returns info which can be used by the client to sync up to the tip of chain for the notes they are interested in.
    //
    // Client specifies the `note_tags` they are interested in, and the block height from which to search for new for
    // matching notes for. The request will then return the next block containing any note matching the provided tags.
    //
    // The response includes each note's metadata and inclusion proof.
    //
    // A basic note sync can be implemented by repeatedly requesting the previous response's block until reaching the
    // tip of the chain. 
    rpc SyncNotes(SyncNotesRequest) returns (SyncNotesResponse) {}

    // Returns info which can be used by the client to sync up to the latest state of the chain
    // for the objects (accounts, notes, nullifiers) the client is interested in.
    //
    // This request returns the next block containing requested data. It also returns `chain_tip`
    // which is the latest block number in the chain. Client is expected to repeat these requests
    // in a loop until `response.block_header.block_num == response.chain_tip`, at which point
    // the client is fully synchronized with the chain.
    //
    // Each request also returns info about new notes, nullifiers etc. created. It also returns
    // Chain MMR delta that can be used to update the state of Chain MMR. This includes both chain
    // MMR peaks and chain MMR nodes.
    //
    // For preserving some degree of privacy, note tags and nullifiers filters contain only high
    // part of hashes. Thus, returned data contains excessive notes and nullifiers, client can make
    // additional filtering of that data on its side.
    rpc SyncState(SyncStateRequest) returns (SyncStateResponse) {}
}

// STORE STATUS
// ================================================================================================

// Represents the status of the store.
message StoreStatus {
    // The store's running version.
    string version = 1;

    // The store's status.
    string status = 2;

    // Number of the latest block in the chain.
    fixed32 chain_tip = 3;
}

// GET ACCOUNT PROOFS
// ================================================================================================

// Returns the latest state proofs of the specified accounts.
message AccountProofsRequest {
    // Represents per-account requests where each account ID has its own list of
    // (storage_slot_index, map_keys) pairs.
    message AccountRequest {
        // Represents a storage slot index and the associated map keys.
        message StorageRequest {
            // Storage slot index ([0..255])
            uint32 storage_slot_index = 1;

            // A list of map keys (Digests) associated with this storage slot.
            repeated primitives.Digest map_keys = 2;
        }

        // The account ID for this request.
        account.AccountId account_id = 1;

        // List of storage requests for this account.
        repeated StorageRequest storage_requests = 2;
    }

    // A list of account requests, including map keys + values.
    repeated AccountRequest account_requests = 1;

    // Optional flag to include account headers and account code in the response. If false, storage
    // requests are also ignored. False by default.
    optional bool include_headers = 2;

    // Account code commitments corresponding to the last-known `AccountCode` for requested
    // accounts. Responses will include only the ones that are not known to the caller.
    // These are not associated with a specific account but rather, they will be matched against
    // all requested accounts.
    repeated primitives.Digest code_commitments = 3;
}

// Represents the result of getting account proofs.
message AccountProofs {
    // A single account proof returned as a response to `GetAccountProofs`.
    message AccountProof {
        // State header for public accounts.
        message AccountStateHeader {
            // Represents a single storage slot with the requested keys and their respective values.
            message StorageSlotMapProof {
                // The storage slot index ([0..255]).
                uint32 storage_slot = 1;

                // Merkle proof of the map value
                bytes smt_proof = 2;
            }

            // Account header.
            account.AccountHeader header = 1;

            // Values of all account storage slots (max 255).
            bytes storage_header = 2;

            // Account code, returned only when none of the request's code commitments match
            // the current one.
            optional bytes account_code = 3;

            // Storage slots information for this account
            repeated StorageSlotMapProof storage_maps = 4;
        }

        // The account witness for the current state commitment of one account ID.
        account.AccountWitness witness = 1;

        // State header for public accounts. Filled only if `include_headers` flag is set to `true`.
        optional AccountStateHeader state_header = 2;
    }

    // Block number at which the state of the accounts is returned.
    fixed32 block_num = 1;

    // List of account state infos for the requested account keys.
    repeated AccountProof account_proofs = 2;
}

// GET ACCOUNT STATE DELTA
// ================================================================================================

// Returns delta of the account states in the range from `from_block_num` (exclusive) to
// `to_block_num` (inclusive).
message AccountStateDeltaRequest {
    // ID of the account for which the delta is requested.
    account.AccountId account_id = 1;
    // Block number from which the delta is requested (exclusive).
    fixed32 from_block_num = 2;
    // Block number up to which the delta is requested (inclusive).
    fixed32 to_block_num = 3;
}

// Represents the result of getting account state delta.
message AccountStateDelta {
    // The calculated account delta encoded using [winter_utils::Serializable] implementation
    // for [miden_objects::account::delta::AccountDelta].
    optional bytes delta = 1;
}

// CHECK NULLIFIERS BY PREFIX
// ================================================================================================

// Returns a list of nullifiers that match the specified prefixes and are recorded in the node.
message CheckNullifiersByPrefixRequest {
    // Number of bits used for nullifier prefix. Currently the only supported value is 16.
    uint32 prefix_len = 1;
    // List of nullifiers to check. Each nullifier is specified by its prefix with length equal
    // to `prefix_len`.
    repeated uint32 nullifiers = 2;
    // Block number from which the nullifiers are requested (inclusive).
    fixed32 block_num = 3;
}

// Represents the result of checking nullifiers by prefix.
message CheckNullifiersByPrefixResponse {
    // Represents a single nullifier update.
    message NullifierUpdate {
        // Nullifier ID.
        primitives.Digest nullifier = 1;

        // Block number.
        fixed32 block_num = 2;
    }
    // List of nullifiers matching the prefixes specified in the request.
    repeated NullifierUpdate nullifiers = 1;
}

// CHECK NULLIFIERS
// ================================================================================================

// List of nullifiers to return proofs for.
message NullifierList {
    // List of nullifiers to return proofs for.
    repeated primitives.Digest nullifiers = 1;
}

// Represents the result of checking nullifiers.
message CheckNullifiersResponse {
    // Each requested nullifier has its corresponding nullifier proof at the same position.
    repeated primitives.SmtOpening proofs = 1;
}

// SYNC STATE
// ================================================================================================

// State synchronization request.
//
// Specifies state updates the client is interested in. The server will return the first block which
// contains a note matching `note_tags` or the chain tip. And the corresponding updates to
// `account_ids` for that block range.
message SyncStateRequest {
    // Last block known by the client. The response will contain data starting from the next block,
    // until the first block which contains a note of matching the requested tag, or the chain tip
    // if there are no notes.
    fixed32 block_num = 1;

    // Accounts' commitment to include in the response.
    //
    // An account commitment will be included if-and-only-if it is the latest update. Meaning it is
    // possible there was an update to the account for the given range, but if it is not the latest,
    // it won't be included in the response.
    repeated account.AccountId account_ids = 2;

    // Specifies the tags which the client is interested in.
    repeated fixed32 note_tags = 3;
}

// Represents the result of syncing state request.
message SyncStateResponse {
    // Number of the latest block in the chain.
    fixed32 chain_tip = 1;

    // Block header of the block with the first note matching the specified criteria.
    blockchain.BlockHeader block_header = 2;

    // Data needed to update the partial MMR from `request.block_num + 1` to `response.block_header.block_num`.
    primitives.MmrDelta mmr_delta = 3;

    // List of account commitments updated after `request.block_num + 1` but not after `response.block_header.block_num`.
    repeated account.AccountSummary accounts = 5;

    // List of transactions executed against requested accounts between `request.block_num + 1` and
    // `response.block_header.block_num`.
    repeated transaction.TransactionSummary transactions = 6;

    // List of all notes together with the Merkle paths from `response.block_header.note_root`.
    repeated note.NoteSyncRecord notes = 7;
}

// SYNC NOTES
// ================================================================================================

// Note synchronization request.
//
// Specifies note tags that client is interested in. The server will return the first block which
// contains a note matching `note_tags` or the chain tip.
message SyncNotesRequest {
    // Last block known by the client. The response will contain data starting from the next block,
    // until the first block which contains a note of matching the requested tag.
    fixed32 block_num = 1;

    // Specifies the tags which the client is interested in.
    repeated fixed32 note_tags = 2;
}

// Represents the result of syncing notes request.
message SyncNotesResponse {
    // Number of the latest block in the chain.
    fixed32 chain_tip = 1;

    // Block header of the block with the first note matching the specified criteria.
    blockchain.BlockHeader block_header = 2;

    // Merkle path to verify the block's inclusion in the MMR at the returned `chain_tip`.
    //
    // An MMR proof can be constructed for the leaf of index `block_header.block_num` of
    // an MMR of forest `chain_tip` with this path.
    primitives.MerklePath mmr_path = 3;

    // List of all notes together with the Merkle paths from `response.block_header.note_root`.
    repeated note.NoteSyncRecord notes = 4;
}
